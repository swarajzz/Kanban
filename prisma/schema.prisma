// schema.prisma

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  boards        Board[]
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
}

model Board {
  id        String   @id @default(uuid())
  name      String
  columns   Column[]
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, name])
}

model Column {
  id        String   @id @default(uuid())
  name      String
  tasks     Task[]
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  order     Float
  boardId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([boardId, name])
}

model Task {
  id          String    @id @default(uuid())
  title       String
  description String
  status      String
  subTasks    SubTask[]
  column      Column    @relation(fields: [columnId], references: [id], onDelete: Cascade)
  order       Float
  columnId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model SubTask {
  id          String   @id @default(uuid())
  title       String
  isCompleted Boolean  @default(false)
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
